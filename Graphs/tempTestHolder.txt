//1. empty Nice Graph init
    // struct NiceGraph * ng1 = initEmptyNG(7, true, true, true);
    // if(!(*ng1).isSym || !(*ng1).isRef || !(*ng1).isTrans)
    //     //printf("DS failure");
    //     exit(DS_FAILED);
    // printf("%d\n",(*ng1).AdjacMatrix[0][0]);

    // //2 debug print the adjacency matrix
    // debugAdjMatrix(ng1);

    // //3. pair init
    // struct Pair * p1 = initPair(1,3);
    
    // //4. Adding p1 pair to ng1
    // addEdge(ng1, p1);
    // debugAdjMatrix(ng1);

    // //5. Creating a no sym, reflex, trans, graph with 
    // //empty Nice Graph init and same pair added
    // struct NiceGraph * ng2 = initEmptyNG(5, false, true, true);
    // printf("%d %d %d \n", ng2->isSym, ng2->isRef, ng2->isTrans);

    // // if((*ng2).isSym || !(*ng2).isRef || !(*ng2).isTrans)
    // //     printf("DS failure \n");
    // //     exit(DS_FAILED);
    // addEdge(ng2, p1);
    // debugAdjMatrix(ng2);

    //6. Creating a pair list
    int ingoing[6] = {1,1,2,2,3,3};
    int outgoing[6] = {2,3,1,3,1,2};
    printf("Arrays initialized \n");
    struct Pair ** pl1 = initPairs(ingoing,outgoing,6);
    printf("Pair List initialized \n");
    printf("first pair %d %d \n",pl1[0]->one, pl1[1]->two);
    printf("jerry rig sample of first pair in list \n");
    debugPL(pl1, 6);
    //7. Use initNG with above pair list



    //passed all checks, successful
    // freeNG(ng1);
    // free(p1);
    // free(ng2);
    freePL(pl1,6);
    
    return 0;